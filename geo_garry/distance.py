from typing import Tuple, List, Optional

import logging
from scipy.spatial import KDTree
from shapely.geometry import Polygon

from . import geometry
from .dataclasses import Coordinates
from .cache import CacheStorageAbstract, CacheableServiceAbstractMixin
from .gmaps import GoogleMapsApi

logger = logging.getLogger(__name__)  # pylint: disable=invalid-name

PointTuple = Tuple[float, float]
MKAD_EXITS_COORDINATES = [
    (55.77682626803085, 37.84269989967345),
    (55.76903191638017, 37.84318651588698),
    (55.74392477931212, 37.84185519957153),
    (55.73052122580085, 37.84037898416108),
    (55.71863531207276, 37.83895012458452),
    (55.711831272333605, 37.83713368900962),
    (55.707901422046966, 37.8350106548768),
    (55.6869523798766, 37.83057993978087),
    (55.65692789667629, 37.83910426510268),
    (55.640528720308474, 37.819652386266085),
    (55.617789410062215, 37.782276430404394),
    (55.59175631830074, 37.72929474857808),
    (55.57581125568298, 37.687799514747375),
    (55.57272629492449, 37.65277241112271),
    (55.57605719591829, 37.59643530860042),
    (55.58106457666858, 37.57265144016032),
    (55.59150701569656, 37.52902190629794),
    (55.61120819157864, 37.49189413873337),
    (55.638972144200956, 37.45948542596951),
    (55.66189360804507, 37.432824164364256),
    (55.68278581583797, 37.416807425418966),
    (55.668026850906536, 37.42778473861195),
    (55.70188946767468, 37.39895204348993),
    (55.713602586285944, 37.38589295731531),
    (55.72348037785042, 37.38078139017449),
    (55.73175585229489, 37.37657178200628),
    (55.76508406345848, 37.36928736556715),
    (55.76996256764349, 37.36942982797446),
    (55.789736950483615, 37.3728868615282),
    (55.808798087528174, 37.388344151047676),
    (55.83260998737753, 37.39560097816893),
    (55.851747102850375, 37.39376480087579),
    (55.87090570963696, 37.41209100527676),
    (55.87659696295345, 37.42839459978549),
    (55.88161130650381, 37.445221243317135),
    (55.88711708090231, 37.482644383447834),
    (55.89207427475143, 37.49649435563702),
    (55.90782224163112, 37.54371914983502),
    (55.90978840669936, 37.58858112800599),
    (55.89518876022445, 37.67325996719509),
    (55.82959228057486, 37.82861019557688),
    (55.8822323534685, 37.72592724800108),
    (55.8138082895938, 37.83884777073161),
    (55.75481214376632, 37.84267307758329),
    (55.70418787329251, 37.8332852107992),
    (55.702989401989484, 37.83263932754),
    (55.65047653581307, 37.83493949978359),
    (55.64502320468091, 37.82690675054945),
    (55.62614603220174, 37.798215117726585),
    (55.59582667642601, 37.73945441049923),
    (55.587464115886156, 37.71946951925047),
    (55.58141301775248, 37.70325579370606),
    (55.57362538548569, 37.63521054231301),
    (55.57456040522403, 37.619314897938175),
    (55.58056831268785, 37.573856505131964),
    (55.58749528969654, 37.5451094875984),
    (55.593784581287494, 37.51884952838902),
    (55.60589190143268, 37.49776326563821),
    (55.61577037337298, 37.48617693805733),
    (55.62588555827154, 37.47443845687327),
    (55.63159809915896, 37.46778063484318),
    (55.65207693603693, 37.4436689941094),
    (55.65663799228618, 37.43816060545844),
    (55.66590855944432, 37.42912931533752),
    (55.68849971417, 37.4141437197791),
    (55.707656747292155, 37.39082356976081),
    (55.70992858606593, 37.38822422159842),
    (55.75188787932283, 37.366333001041205),
    (55.79604144033229, 37.37852370112031),
    (55.81331234523823, 37.38954092451),
    (55.81568484607161, 37.390191395766784),
    (55.82131114715086, 37.391900629017584),
    (55.825072975139875, 37.393084859162826),
    (55.830495842317646, 37.39451898008863),
    (55.8339338725267, 37.39594735722236),
    (55.85865656090271, 37.397073365517734),
    (55.86699779674642, 37.40492948497198),
    (55.87821893534327, 37.43308640028372),
    (55.88949415675149, 37.48972351315925),
    (55.90681458164319, 37.53369071576891),
    (55.910830265189425, 37.57059586873433),
    (55.911011046432726, 37.581529228009686),
    (55.89964948588706, 37.629701188337705),
    (55.895716922397085, 37.66346711671403),
    (55.89505379117015, 37.68453970149422),
    (55.894105661911894, 37.699083186567655),
    (55.89178148825972, 37.70718435431336),
    (55.87839320587734, 37.734177892950065),
    (55.82543390489343, 37.83464260085545),
    (55.81012946042399, 37.83951226232321),
    (55.80418173177062, 37.83998433110984),
    (55.802423269353746, 37.840209636667076),
    (55.90738403567146, 37.5979956303702),
]

MKAD_EXITS_POLYGON = Polygon([
    (55.77682929150693, 37.8427186924053),
    (55.77271261339107, 37.843152686304705),
    (55.738276896644805, 37.84134161820584),
    (55.71399689835854, 37.83813880871875),
    (55.699921267680175, 37.83078428272048),
    (55.6962950504132, 37.82954151435689),
    (55.6928207993758, 37.82931794772561),
    (55.6892209716432, 37.829854389528585),
    (55.66165146026852, 37.83966290527148),
    (55.658376283618054, 37.8394483285503),
    (55.65605007409182, 37.838791290011436),
    (55.6531141363056, 37.8370746762419),
    (55.65145113826342, 37.83568956934368),
    (55.64812656859308, 37.8314409502641),
    (55.644824797922006, 37.82628977266418),
    (55.625585595616016, 37.79678983996685),
    (55.62124956968963, 37.78912615774818),
    (55.60391627214637, 37.75711862597196),
    (55.59919459324873, 37.74706053825473),
    (55.59180719241245, 37.72946947797549),
    (55.588836348363664, 37.7225364780563),
    (55.575884202346515, 37.68793829096614),
    (55.57326575851499, 37.679926824757885),
    (55.57229316496271, 37.67458386440024),
    (55.571916278457984, 37.66924090404256),
    (55.57203486325925, 37.66469310778763),
    (55.576012618166274, 37.59661654265479),
    (55.576997275315456, 37.58977417112674),
    (55.593461027106216, 37.52076943829923),
    (55.5950406236937, 37.51480420545011),
    (55.59619490389248, 37.51175721600919),
    (55.597166902872914, 37.509675821813644),
    (55.59866130413232, 37.50692923978237),
    (55.59992481831982, 37.505169710668625),
    (55.60066420884299, 37.50419141558768),
    (55.61116763612223, 37.491928885586624),
    (55.638875974823236, 37.459586882490854),
    (55.659861822998046, 37.43484779763937),
    (55.66403637567329, 37.43088149929608),
    (55.68274170580392, 37.41690766704496),
    (55.68445104083821, 37.41598498714383),
    (55.68864009415873, 37.41437258409716),
    (55.69086356292832, 37.41284823307507),
    (55.69271798296722, 37.41115307697766),
    (55.694411609835676, 37.40906103948314),
    (55.69633857479258, 37.40646466115671),
    (55.70821582138647, 37.39042283284293),
    (55.709960382334486, 37.388470184680074),
    (55.71100223559, 37.387526047106846),
    (55.714297215701556, 37.38550902592765),
    (55.74299678995391, 37.37085040270776),
    (55.74737891548303, 37.3693383084583),
    (55.749835763080554, 37.36897352803228),
    (55.78212184948561, 37.36975523402037),
    (55.78471424142089, 37.370104443868414),
    (55.7865400068638, 37.370812547048324),
    (55.789647237893845, 37.37287248357179),
    (55.80029924148098, 37.38296043585071),
    (55.804902293956964, 37.38656302639442),
    (55.80873309836682, 37.38838692852456),
    (55.83469933158447, 37.39616684582014),
    (55.838100191970035, 37.39588770506112),
    (55.84068411346117, 37.394943567487864),
    (55.844347068377, 37.39240249367216),
    (55.84601308639975, 37.391908967213396),
    (55.847449667553015, 37.39193042488553),
    (55.84921212285334, 37.39242395134426),
    (55.85763645302826, 37.39690455309926),
    (55.860737839006916, 37.39879032715197),
    (55.862584159418496, 37.40035673721667),
    (55.864949251589444, 37.40273853882189),
    (55.86706126571094, 37.40537841047629),
    (55.869498474258364, 37.40936953749045),
    (55.871054829060206, 37.412373611587114),
    (55.87204410730281, 37.41473395552023),
    (55.87320337129219, 37.41764120434771),
    (55.875543687912774, 37.424979728212456),
    (55.8813305362832, 37.44392953059815),
    (55.88207002762898, 37.44778576813208),
    (55.882588650864065, 37.452763948063726),
    (55.88275750343904, 37.46081057510839),
    (55.88292635527642, 37.464286717991705),
    (55.883384663688354, 37.46735516510474),
    (55.88551934442368, 37.47628155670629),
    (55.888075982000466, 37.48647395096288),
    (55.88926982558072, 37.49010029755102),
    (55.89215178082288, 37.496623429875235),
    (55.904441104424826, 37.52475156556294),
    (55.90586346265124, 37.529643914806094),
    (55.90676747666915, 37.53442897568867),
    (55.90726166205295, 37.538141152965274),
    (55.910865408147124, 37.57275237809345),
    (55.911022085130945, 37.57652892838642),
    (55.91097387689595, 37.579554460155215),
    (55.91063641756565, 37.58356704484148),
    (55.90998559481434, 37.587579629527774),
    (55.9092021825094, 37.5910986877553),
    (55.90847901858254, 37.593480489360545),
    (55.901901172883115, 37.6180182383294),
    (55.89891144249577, 37.63301715114069),
    (55.89687395332799, 37.64762982585381),
    (55.89576474245468, 37.659367172502996),
    (55.89456572248885, 37.69416117435827),
    (55.89393874366838, 37.699139354289926),
    (55.89328763950915, 37.70195030933754),
    (55.89247977280019, 37.70471834904089),
    (55.89140661030458, 37.70757221943274),
    (55.880130573679516, 37.73042464023962),
    (55.8304865952908, 37.8268977445699),
    (55.829001074066674, 37.82968724194538),
    (55.82757588633297, 37.831725720796705),
    (55.82488607061184, 37.834775327717445),
    (55.822361493423664, 37.836706518208175),
    (55.82024748644772, 37.8376291981093),
    (55.816165064041414, 37.83857287182817),
    (55.81242284003345, 37.83903585464755),
    (55.803139424516395, 37.839775801016756),
    (55.77682929150693, 37.8427186924053)
])

MKAD_TREE = KDTree(MKAD_EXITS_COORDINATES)

KAD_POLYGON = Polygon([
    (60.08487790460000000, 30.37805557250000000),
    (60.07244124040000000, 30.38234710690000000),
    (60.06317501140000000, 30.38612365720000000),
    (60.05665276610000000, 30.39384841920000000),
    (60.05321948590000000, 30.40071487430000000),
    (60.04721038330000000, 30.42697906490000000),
    (60.04283163170000000, 30.43659210210000000),
    (60.03218282480000000, 30.44260025020000000),
    (60.01912474870000000, 30.45753479000000000),
    (60.01302347850000000, 30.47092437740000000),
    (60.00588957520000000, 30.47624588010000000),
    (59.99849619080000000, 30.47658920290000000),
    (59.98826307530000000, 30.48706054690000000),
    (59.98490867420000000, 30.49461364750000000),
    (59.98120983660000000, 30.51778793330000000),
    (59.97708041170000000, 30.53426742550000000),
    (59.96468903650000000, 30.51332473760000000),
    (59.94566266780000000, 30.50937652590000000),
    (59.93282874780000000, 30.50748825070000000),
    (59.91973129100000000, 30.50319671630000000),
    (59.90585266840000000, 30.50010681150000000),
    (59.88869029930000000, 30.49598693840000000),
    (59.88109807240000000, 30.50662994390000000),
    (59.87065591860000000, 30.51589965820000000),
    (59.86349121550000000, 30.52379608150000000),
    (59.85451157020000000, 30.50405502320000000),
    (59.85356165780000000, 30.48173904420000000),
    (59.84414741890000000, 30.49032211300000000),
    (59.83909372090000000, 30.51366806030000000),
    (59.83186818760000000, 30.52165031430000000),
    (59.82585110990000000, 30.51521301270000000),
    (59.83092842870000000, 30.50165176390000000),
    (59.84786161200000000, 30.46079635620000000),
    (59.83576736250000000, 30.44912338260000000),
    (59.82591593100000000, 30.43556213380000000),
    (59.81761772070000000, 30.39625167850000000),
    (59.81485118970000000, 30.36809921260000000),
    (59.81511056180000000, 30.35556793210000000),
    (59.81009567620000000, 30.33376693730000000),
    (59.81096036570000000, 30.32329559330000000),
    (59.82072979260000000, 30.30132293700000000),
    (59.83248387690000000, 30.28415679930000000),
    (59.83507612940000000, 30.27832031250000000),
    (59.83464410130000000, 30.26853561400000000),
    (59.82410087470000000, 30.22596359250000000),
    (59.81441889850000000, 30.20622253420000000),
    (59.81113330090000000, 30.19231796260000000),
    (59.80084209000000000, 30.16983032230000000),
    (59.79997713710000000, 30.15369415280000000),
    (59.81372722070000000, 30.11009216310000000),
    (59.81571575540000000, 30.09155273440000000),
    (59.83023709490000000, 30.09163856510000000),
    (59.84984810320000000, 30.09078025820000000),
    (59.87203688770000000, 30.08820533750000000),
    (59.87393562690000000, 30.13721466060000000),
    (59.91654230880000000, 30.20313262940000000),
    (59.94273456070000000, 30.16914367680000000),
    (59.99178912910000000, 30.17978668210000000),
    (60.01500007010000000, 30.18253326410000000),
    (60.03115211220000000, 30.18321990970000000),
    (60.07475738970000000, 30.18064498910000000),
    (60.07565807050000000, 30.20133018490000000),
    (60.07818842200000000, 30.24012565610000000),
    (60.08054704910000000, 30.26355743410000000),
    (60.08320566200000000, 30.29119491570000000),
    (60.08406323310000000, 30.30200958250000000),
    (60.08685018470000000, 30.32260894770000000),
    (60.09019421450000000, 30.35264968870000000),
    (60.09208044010000000, 30.36724090580000000),
    (60.08487790460000000, 30.37805557250000000),
])

KAD_CENTER = Coordinates(59.95, 30.305)


class DistanceCalculatorAbstract:
    def __init__(self, *, polygon: Polygon):
        self.polygon = polygon

    def get_distance(self, coordinates: Coordinates) -> int:
        """Returns distance from coordinates to polygon in kilometers."""
        if not self.polygon or geometry.is_inside_polygon(coordinates, self.polygon):
            return 0

        distance = self.calc_distance(coordinates)

        distance = round(float(distance) / 1000) if distance > 1000 else 1
        return distance

    def calc_distance(self, coordinates: Coordinates) -> int:
        """Caclulates distance from coordinates to polygon in meters using some strategy."""
        raise NotImplementedError


class NearestExitsGoogleDistanceCalculator(DistanceCalculatorAbstract):
    log_message = 'Рассчитано расстояние от ближайших выездов с полигона (в метрах)'

    def __init__(
            self,
            *,
            api: GoogleMapsApi,
            polygon: Polygon,
            exits_coordinates: List[PointTuple],
            exits_tree: Optional[KDTree] = None,
    ):
        super().__init__(polygon=polygon)
        self.api = api
        self.exits = exits_coordinates
        self.kdtree = exits_tree if exits_tree else KDTree(exits_coordinates)

    def calc_distance(self, coordinates: Coordinates) -> int:
        dists, indexes = self.kdtree.query((coordinates.latitude, coordinates.longitude), k=7)
        nearest_coordinates = list()
        for _, index in zip(dists, indexes):
            nearest_coordinates.append(self.exits[index])

        distance = self.api.get_distance_from_points(nearest_coordinates, coordinates.as_tuple())
        logger.info(
            self.log_message,
            extra=dict(distance=distance, coordinates=coordinates.as_str())
        )
        return distance


class PolygonCenterGoogleDistanceCalculator(DistanceCalculatorAbstract):
    log_message = 'Рассчитано расстояние от центра полигона (в метрах)'

    def __init__(self, *, api: GoogleMapsApi, polygon: Polygon, center: Coordinates):
        super().__init__(polygon=polygon)
        self.api = api
        self.center = center

    def calc_distance(self, coordinates: Coordinates) -> int:
        driving_path = self.api.get_driving_path(self.center.as_tuple(), coordinates.as_tuple())
        distance = 0
        for step in reversed(driving_path):
            start_point = Coordinates(step['start_location']['lat'], step['start_location']['lng'])
            if geometry.is_inside_polygon(start_point, self.polygon):
                end_point = Coordinates(step['end_location']['lat'], step['end_location']['lng'])
                distance += geometry.get_part_outside_polygon(
                    geometry.get_line(start_point, end_point), self.polygon
                ) * step['distance']['value']
                break
            distance += step['distance']['value']
        logger.info(
            self.log_message,
            extra=dict(distance=distance, coordinates=coordinates.as_str())
        )
        return distance


class CacheStorageDistance(CacheStorageAbstract):

    def get_key(self, instance: Coordinates) -> str:
        return f'distance:{instance.as_str()}'

    def deserialize_value(self, value: bytes) -> int:
        return int(value)

    def serialize_value(self, value: int) -> str:
        return str(value)


class CachedDistanceCalculator(CacheableServiceAbstractMixin, DistanceCalculatorAbstract):
    storage_class = CacheStorageDistance

    def refresh_value(self, key: Coordinates) -> int:
        return super().calc_distance(key)

    def calc_distance(self, coordinates: Coordinates) -> int:
        return self.get(coordinates)


class MkadDistanceCalculator(CachedDistanceCalculator, NearestExitsGoogleDistanceCalculator):
    expire_time = 60 * 60 * 24 * 30  # 30 days
    log_message = 'Рассчитано расстояние от МКАД (в метрах)'

    def __init__(self, storage, gmaps_client):
        super().__init__(
            storage=storage,
            api=GoogleMapsApi(gmaps_client),
            polygon=MKAD_EXITS_POLYGON,
            exits_coordinates=MKAD_EXITS_COORDINATES,
            exits_tree=MKAD_TREE,
        )


class KadDistanceCalculator(CachedDistanceCalculator, PolygonCenterGoogleDistanceCalculator):
    expire_time = 60 * 60 * 24 * 30  # 30 days
    log_message = 'Рассчитано расстояние от КАД (в метрах)'

    def __init__(self, storage, gmaps_client):
        super().__init__(
            storage=storage,
            api=GoogleMapsApi(gmaps_client),
            polygon=KAD_POLYGON,
            center=KAD_CENTER
        )
